***********************************************************************
*
*	CODE GENERATION LISTING FOR: rover_safety_controller
*	COMPILER VERSION: 5.22.0.39
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
300000B0  FB90 F3F1		sdiv r3, r0, r1
300000B4  4359     		mul r1, r1, r3
300000B6  EBC1 0000		rsb r0, r1, r0
300000BA  4770     		bx lr

$$MOD_U:
300000BC  FBB0 F3F1		udiv r3, r0, r1
300000C0  4359     		mul r1, r1, r3
300000C2  EBC1 0000		rsb r0, r1, r0
300000C6  4770     		bx lr

**************************************************
	List function block: F_TRIG
**************************************************

FUNCTION_BLOCK F_TRIG

	{ DE:"<HTML>The output Q remain FALSE as long as the input variable CLK returns TRUE.<br>
As soon as CLK returns FALSE, Q will first return TRUE.<br><br>
This means each time the function is called up, Q will return FALSE until CLK has a rising followed by a falling edge.<br><br>
<img src= f_trig.png >" }

        VAR_INPUT
clk : BOOL;	{ DE:"Input for edge detection" }
	END_VAR

        VAR_OUTPUT
q : BOOL;	{ DE:"Falling edge output" }
	END_VAR

        VAR
m : BOOL := FALSE;
	END_VAR

END_FUNCTION_BLOCK

300000C8  E92D 4040		stmdb sp!, { r6, lr }
300000CC  462E     		mov r6, r5

#0		{SRC:F_TRIG}
#1		
#2			LDN		clk
(*) UNDEF
300000CE  7870     		ldrb r0, [r6, #1]
300000D0  2800     		cmp r0, #0
300000D2  BF08 2001		eqmov r0, #1
300000D6  BF18 2000		nemov r0, #0

#3			AND		m
(*) BOOL
300000DA  7837     		ldrb r7, [r6]
300000DC  4038     		and r0, r0, r7

#4			ST		q
(-) BOOL
300000DE  70B0     		strb r0, [r6, #2]

#5		
#6			LD		clk
(-) UNDEF
300000E0  7870     		ldrb r0, [r6, #1]

#7			ST		m
(-) BOOL
300000E2  7030     		strb r0, [r6]

300000E4  E8BD 4040		ldmia sp!, { r6, lr }

300000E8  4770     		bx lr


Frame allocation:

	0000 bit  0: VAR m
	0001 bit  0: VAR clk
	0002 bit  0: VAR q

END_FUNCTION_BLOCK
**************************************************
	List function block: RS
**************************************************

FUNCTION_BLOCK RS

	{ DE:"<HTML>Bistable, reset dominant</br></br>
<img src= rsscheme.png >" }

        VAR_INPUT
s : BOOL;	{ DE:"Logic input" }
r1 : BOOL;	{ DE:"Reset input" }
	END_VAR

        VAR_OUTPUT
q1 : BOOL;	{ DE:"Bistable output" }
	END_VAR

END_FUNCTION_BLOCK

300000EA  E92D 4040		stmdb sp!, { r6, lr }
300000EE  462E     		mov r6, r5

#0		{SRC:RS}
#1		
#2			LD		s
(-) UNDEF
300000F0  7830     		ldrb r0, [r6]

#3			OR		q1
(*) BOOL
300000F2  78B7     		ldrb r7, [r6, #2]
300000F4  4338     		orr r0, r0, r7

#4			ANDN	r1
(*) BOOL
300000F6  7877     		ldrb r7, [r6, #1]
300000F8  2F00     		cmp r7, #0
300000FA  BF08 2701		eqmov r7, #1
300000FE  BF18 2700		nemov r7, #0
30000102  4038     		and r0, r0, r7

#5			ST		q1
(-) BOOL
30000104  70B0     		strb r0, [r6, #2]

30000106  E8BD 4040		ldmia sp!, { r6, lr }

3000010A  4770     		bx lr


Frame allocation:

	0000 bit  0: VAR s
	0001 bit  0: VAR r1
	0002 bit  0: VAR q1

END_FUNCTION_BLOCK
**************************************************
	List function block: SR
**************************************************

FUNCTION_BLOCK SR

	{ DE:"<HTML>Bistable, set dominant</br></br>
<img src= srscheme.png >" }

        VAR_INPUT
s1 : BOOL;	{ DE:"Logic input" }
r : BOOL;	{ DE:"Reset input" }
	END_VAR

        VAR_OUTPUT
q1 : BOOL;	{ DE:"Bistable output" }
	END_VAR

END_FUNCTION_BLOCK

3000010C  E92D 4040		stmdb sp!, { r6, lr }
30000110  462E     		mov r6, r5

#0		{SRC:SR}
#1			
#2			LDN		r
(*) UNDEF
30000112  7870     		ldrb r0, [r6, #1]
30000114  2800     		cmp r0, #0
30000116  BF08 2001		eqmov r0, #1
3000011A  BF18 2000		nemov r0, #0

#3			AND		q1
(*) BOOL
3000011E  78B7     		ldrb r7, [r6, #2]
30000120  4038     		and r0, r0, r7

#4			OR		s1
(*) BOOL
30000122  7837     		ldrb r7, [r6]
30000124  4338     		orr r0, r0, r7

#5			ST		q1
(-) BOOL
30000126  70B0     		strb r0, [r6, #2]

30000128  E8BD 4040		ldmia sp!, { r6, lr }

3000012C  4770     		bx lr


Frame allocation:

	0000 bit  0: VAR s1
	0001 bit  0: VAR r
	0002 bit  0: VAR q1

END_FUNCTION_BLOCK
**************************************************
	List function block: TOF
**************************************************

FUNCTION_BLOCK TOF

	{ DE:"<HTML>The TOF block produces a delayed de-activation of the output Q with respect of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tofscheme.png>
<ul>
<li>if IN is TRUE then Q is TRUE</li>
<li>Q becomes FALSE after PT milliseconds from IN becomes FALSE</li>
<li>Q remains FALSE until IN remains FALSE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

3000012E  E92D 4040		stmdb sp!, { r6, lr }
30000132  462E     		mov r6, r5

#0		{SRC:TOF}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
30000134  7930     		ldrb r0, [r6, #4]

#5			JMPC	lReset
(-) BOOL
30000136  2800     		cmp r0, #0
30000138  D130     		bne #96 ; 0x3000019C


#6		
#7			(*	Check if falling edge of IN	*)
#8			LD		Q
(-) UNDEF
3000013C  7B30     		ldrb r0, [r6, #12]

#9			RETCN
#10		
(-) BOOL
3000013E  2800     		cmp r0, #0
30000140  D031     		beq #98 ; 0x300001A6


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
30000144  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
30000146  2800     		cmp r0, #0
30000148  BF18 2000		nemov r0, #0
3000014C  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
30000150  2800     		cmp r0, #0
30000152  D004     		beq #8 ; 0x3000015E


#15			
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
30000156  F8DF 7054		ldr r7, [pc, #+84] ; 0x24020548
3000015A  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
3000015C  6030     		str r0, [r6]

#19		
#20		lUpdate:
#21			
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
3000015E  F8DF 704C		ldr r7, [pc, #+76] ; 0x24020548
30000162  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
30000164  6837     		ldr r7, [r6]
30000166  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
30000168  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
3000016A  68B7     		ldr r7, [r6, #8]
3000016C  42B8     		cmp r0, r7
3000016E  BF38 2000		lomov r0, #0
30000172  BF28 2001		hsmov r0, #1

#27			STN		Q
(*) BOOL
30000176  B082     		sub sp, sp, #8
30000178  F8CD 0000		str r0, [sp]
3000017C  2800     		cmp r0, #0
3000017E  BF08 2001		eqmov r0, #1
30000182  BF18 2000		nemov r0, #0
30000186  7330     		strb r0, [r6, #12]
30000188  F8DD 0000		ldr r0, [sp]
3000018C  B002     		add sp, sp, #8

#28			RETCN
#29			
(-) BOOL
3000018E  2800     		cmp r0, #0
30000190  D009     		beq #18 ; 0x300001A6


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
30000194  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
30000196  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
30000198  E005     		b #10 ; 0x300001A6


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
3000019C  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
3000019E  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
300001A0  6030     		str r0, [r6]

#41			LD		TRUE
(-) UNDEF
300001A2  2001     		mov r0, #1 ; 1

#42			ST		Q
(-) BOOL
300001A4  7330     		strb r0, [r6, #12]

300001A6  E8BD 4040		ldmia sp!, { r6, lr }

300001AA  4770     		bx lr

300001AC  FFFFFFFF		; 0x24020548


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

300001B0  E92D 4040		stmdb sp!, { r6, lr }
300001B4  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
300001B6  7930     		ldrb r0, [r6, #4]

#5			JMPCN	lReset
(-) BOOL
300001B8  2800     		cmp r0, #0
300001BA  D025     		beq #74 ; 0x30000208


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(-) UNDEF
300001BE  7B30     		ldrb r0, [r6, #12]

#9			RETC
#10			
(-) BOOL
300001C0  2800     		cmp r0, #0
300001C2  D126     		bne #76 ; 0x30000212


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
300001C6  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
300001C8  2800     		cmp r0, #0
300001CA  BF18 2000		nemov r0, #0
300001CE  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
300001D2  2800     		cmp r0, #0
300001D4  D004     		beq #8 ; 0x300001E0


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
300001D8  F8DF 703C		ldr r7, [pc, #+60] ; 0x24020548
300001DC  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
300001DE  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
300001E0  F8DF 7034		ldr r7, [pc, #+52] ; 0x24020548
300001E4  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
300001E6  6837     		ldr r7, [r6]
300001E8  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
300001EA  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
300001EC  68B7     		ldr r7, [r6, #8]
300001EE  42B8     		cmp r0, r7
300001F0  BF38 2000		lomov r0, #0
300001F4  BF28 2001		hsmov r0, #1

#27			ST		Q
(-) BOOL
300001F8  7330     		strb r0, [r6, #12]

#28			RETCN
#29		
(-) BOOL
300001FA  2800     		cmp r0, #0
300001FC  D009     		beq #18 ; 0x30000212


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
30000200  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
30000202  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
30000204  E005     		b #10 ; 0x30000212


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
30000208  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
3000020A  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
3000020C  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
3000020E  2000     		mov r0, #0 ; 0

#42			ST		Q
(-) BOOL
30000210  7330     		strb r0, [r6, #12]

30000212  E8BD 4040		ldmia sp!, { r6, lr }

30000216  4770     		bx lr

30000218  FFFFFFFF		; 0x24020548


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List program: safety
**************************************************

PROGRAM safety

        VAR
SR : SR;
RS : RS;
F_TRGO : F_TRIG;
e_stop : BOOL := false;
	END_VAR

END_PROGRAM

30000220  B082     		sub sp, sp, #8
30000222  F8CD E000		str lr, [sp]
30000226  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0			{SRC:safety}
#1		 
#2		  
#3			(* Network 1 *)
#4			LDN		SW_E_STOP_MOTOR_DRIVER_FAULT {R:1$11}
(*) UNDEF
3000022A  F8DF 7148		ldr r7, [pc, #+328] ; 0x24021623
3000022E  7838     		ldrb r0, [r7]
30000230  2800     		cmp r0, #0
30000232  BF08 2001		eqmov r0, #1
30000236  BF18 2000		nemov r0, #0

#5			AND		WDG_FAULT {R:1$13}
(*) BOOL
3000023A  F8DF 7108		ldr r7, [pc, #+264] ; 0x200002A7
3000023E  783F     		ldrb r7, [r7]
30000240  4038     		and r0, r0, r7

#6			ANDN		HW_E_STOP_USER_BTN {R:1$14}
(*) BOOL
30000242  F8DF 713C		ldr r7, [pc, #+316] ; 0x24021634
30000246  783F     		ldrb r7, [r7]
30000248  2F00     		cmp r7, #0
3000024A  BF08 2701		eqmov r7, #1
3000024E  BF18 2700		nemov r7, #0
30000252  4038     		and r0, r0, r7

#7			STN		E_STOP {R:1$1}
(*) BOOL
30000254  F8DF 70E8		ldr r7, [pc, #+232] ; 0x200002A6
30000258  B082     		sub sp, sp, #8
3000025A  F8CD 0000		str r0, [sp]
3000025E  2800     		cmp r0, #0
30000260  BF08 2001		eqmov r0, #1
30000264  BF18 2000		nemov r0, #0
30000268  7038     		strb r0, [r7]
3000026A  F8DD 0000		ldr r0, [sp]
3000026E  B002     		add sp, sp, #8

#8		 
#9			(* Network 2 *)
#10			LD		E_STOP {R:2$27}
(*) UNDEF
30000270  F8DF 70CC		ldr r7, [pc, #+204] ; 0x200002A6
30000274  7838     		ldrb r0, [r7]

#11			ST		SR.S1 {R:2$3}
(*) BOOL
30000276  F8DF 70D0		ldr r7, [pc, #+208] ; 0x200002AC
3000027A  7038     		strb r0, [r7]

#12			LD		SW_E_STOP_LATCH_RESET {R:2$37}
(*) UNDEF
3000027C  F8DF 70F8		ldr r7, [pc, #+248] ; 0x24021624
30000280  7838     		ldrb r0, [r7]

#13			OR		HW_E_STOP_USER_BTN {R:2$5}
(*) BOOL
30000282  F8DF 70FC		ldr r7, [pc, #+252] ; 0x24021634
30000286  783F     		ldrb r7, [r7]
30000288  4338     		orr r0, r0, r7

#14			ST		F_TRGO.CLK {R:2$36}
(*) BOOL
3000028A  F8DF 70CC		ldr r7, [pc, #+204] ; 0x200002B1
3000028E  7038     		strb r0, [r7]

#15			CAL		F_TRGO {R:2$36}
(*) BOOL
30000290  E92D 0021		stmdb sp!, { r0, r5 }
30000294  F8DF 50BC		ldr r5, [pc, #+188] ; 0x200002B0
30000298  F8DF 40E8		ldr r4, [pc, #+232] ; 0x300000C8
3000029C  F044 0401		orr r4, r4, #1
300002A0  47A0     		blx r4
300002A2  E8BD 0021		ldmia sp!, { r0, r5 }

#16			LD		F_TRGO.Q {R:2$36}
(*) UNDEF
300002A6  F8DF 70B4		ldr r7, [pc, #+180] ; 0x200002B2
300002AA  7838     		ldrb r0, [r7]

#17			ST		SR.R {R:2$3}
(*) BOOL
300002AC  F8DF 709C		ldr r7, [pc, #+156] ; 0x200002AD
300002B0  7038     		strb r0, [r7]

#18			CAL		SR {R:2$3}
(*) BOOL
300002B2  E92D 0021		stmdb sp!, { r0, r5 }
300002B6  F8DF 5090		ldr r5, [pc, #+144] ; 0x200002AC
300002BA  F8DF 40D0		ldr r4, [pc, #+208] ; 0x3000010C
300002BE  F044 0401		orr r4, r4, #1
300002C2  47A0     		blx r4
300002C4  E8BD 0021		ldmia sp!, { r0, r5 }

#19			LD		SR.Q1 {R:2$3}
(*) UNDEF
300002C8  F8DF 7084		ldr r7, [pc, #+132] ; 0x200002AE
300002CC  7838     		ldrb r0, [r7]

#20			ST		SW_E_STOP_LATCH_STATUS {R:2$1}
(*) BOOL
300002CE  F8DF 70AC		ldr r7, [pc, #+172] ; 0x24021625
300002D2  7038     		strb r0, [r7]

#21		 
#22			(* Network 3 *)
#23			LDN		E_STOP {R:3$0}
(*) UNDEF
300002D4  F8DF 7068		ldr r7, [pc, #+104] ; 0x200002A6
300002D8  7838     		ldrb r0, [r7]
300002DA  2800     		cmp r0, #0
300002DC  BF08 2001		eqmov r0, #1
300002E0  BF18 2000		nemov r0, #0

#24			ST		RS.S {R:3$2}
(*) BOOL
300002E4  F8DF 7078		ldr r7, [pc, #+120] ; 0x200002B8
300002E8  7038     		strb r0, [r7]

#25			LD		SW_E_STOP_LATCH_STATUS {R:3$11}
(*) UNDEF
300002EA  F8DF 7090		ldr r7, [pc, #+144] ; 0x24021625
300002EE  7838     		ldrb r0, [r7]

#26			ST		RS.R1 {R:3$2}
(*) BOOL
300002F0  F8DF 7070		ldr r7, [pc, #+112] ; 0x200002B9
300002F4  7038     		strb r0, [r7]

#27			CAL		RS {R:3$2}
(*) BOOL
300002F6  E92D 0021		stmdb sp!, { r0, r5 }
300002FA  F8DF 5064		ldr r5, [pc, #+100] ; 0x200002B8
300002FE  F8DF 4088		ldr r4, [pc, #+136] ; 0x300000EA
30000302  F044 0401		orr r4, r4, #1
30000306  47A0     		blx r4
30000308  E8BD 0021		ldmia sp!, { r0, r5 }

#28			LD		RS.Q1 {R:3$2}
(*) UNDEF
3000030C  F8DF 7058		ldr r7, [pc, #+88] ; 0x200002BA
30000310  7838     		ldrb r0, [r7]

#29			ANDN		HW_E_STOP_USER_BTN {R:3$9}
(*) BOOL
30000312  F8DF 706C		ldr r7, [pc, #+108] ; 0x24021634
30000316  783F     		ldrb r7, [r7]
30000318  2F00     		cmp r7, #0
3000031A  BF08 2701		eqmov r7, #1
3000031E  BF18 2700		nemov r7, #0
30000322  4038     		and r0, r0, r7

#30			ANDN		SW_E_STOP_USER_BUTTON {R:3$13}
(*) BOOL
30000324  F8DF 7048		ldr r7, [pc, #+72] ; 0x24021622
30000328  783F     		ldrb r7, [r7]
3000032A  2F00     		cmp r7, #0
3000032C  BF08 2701		eqmov r7, #1
30000330  BF18 2700		nemov r7, #0
30000334  4038     		and r0, r0, r7

#31			ST		MOTOR_COIL {R:3$1}
(*) BOOL
30000336  F8DF 7034		ldr r7, [pc, #+52] ; 0x24021620
3000033A  7038     		strb r0, [r7]

3000033C  E028     		b #80

30000340  200002A6		; 0x200002A6
30000344  200002A7		; 0x200002A7
30000348  200002AC		; 0x200002AC
3000034C  200002AD		; 0x200002AD
30000350  200002AE		; 0x200002AE
30000354  200002B0		; 0x200002B0
30000358  200002B1		; 0x200002B1
3000035C  200002B2		; 0x200002B2
30000360  200002B8		; 0x200002B8
30000364  200002B9		; 0x200002B9
30000368  200002BA		; 0x200002BA
3000036C  FFFFFFFF		; 0x24021620
30000370  FFFFFFFF		; 0x24021622
30000374  FFFFFFFF		; 0x24021623
30000378  FFFFFFFF		; 0x24021624
3000037C  FFFFFFFF		; 0x24021625
30000380  FFFFFFFF		; 0x24021634
30000384  300000C8		; 0x300000C8
30000388  300000EA		; 0x300000EA
3000038C  3000010C		; 0x3000010C

END_PROGRAM
**************************************************
	List program: watchdog
**************************************************

PROGRAM watchdog

	{ DE:"Software watchdog triggered by toogle the input" }

        VAR
TON : TON;
TOF : TOF;
ton_set_reset : BOOL;
tof_set_reset : BOOL;
	END_VAR

        VAR CONSTANT
watchdog_timeout : UINT := 4000;
	END_VAR

END_PROGRAM

#0			{SRC:watchdog}
#1		 
#2		  
#3			(* Network 1 *)
#4			LD		SW_E_STOP_CPU_WDG_TRIGGER {R:1$0}
(*) UNDEF
30000390  F8DF 70D8		ldr r7, [pc, #+216] ; 0x24021621
30000394  7838     		ldrb r0, [r7]

#5			ST		TON.IN {R:1$9}
(*) BOOL
30000396  F8DF 70B8		ldr r7, [pc, #+184] ; 0x200002C0
3000039A  7038     		strb r0, [r7]

#6			MOVE		WATCHDOG_TIMEOUT,TON.PT {R:1$9}
(*) BOOL
3000039C  F44F 607A		mov r0, #4000 ; 4000
300003A0  F8DF 70B0		ldr r7, [pc, #+176] ; 0x200002C4
300003A4  6038     		str r0, [r7]

#7			CAL		TON {R:1$9}
(*) UDINT
300003A6  E92D 0021		stmdb sp!, { r0, r5 }
300003AA  F8DF 50A0		ldr r5, [pc, #+160] ; 0x200002BC
300003AE  F8DF 40C4		ldr r4, [pc, #+196] ; 0x300001B0
300003B2  F044 0401		orr r4, r4, #1
300003B6  47A0     		blx r4
300003B8  E8BD 0021		ldmia sp!, { r0, r5 }

#8			LD		TON.Q {R:1$9}
(*) UNDEF
300003BC  F8DF 7098		ldr r7, [pc, #+152] ; 0x200002C8
300003C0  7838     		ldrb r0, [r7]

#9			ST		TON_SET_RESET {R:1$1}
(*) BOOL
300003C2  F8DF 7080		ldr r7, [pc, #+128] ; 0x200002B5
300003C6  7038     		strb r0, [r7]

#10		 
#11			(* Network 2 *)
#12			LD		SW_E_STOP_CPU_WDG_TRIGGER {R:2$0}
(*) UNDEF
300003C8  F8DF 70A0		ldr r7, [pc, #+160] ; 0x24021621
300003CC  7838     		ldrb r0, [r7]

#13			ST		TOF.IN {R:2$2}
(*) BOOL
300003CE  F8DF 7090		ldr r7, [pc, #+144] ; 0x200002D4
300003D2  7038     		strb r0, [r7]

#14			MOVE		WATCHDOG_TIMEOUT,TOF.PT {R:2$2}
(*) BOOL
300003D4  F44F 607A		mov r0, #4000 ; 4000
300003D8  F8DF 7088		ldr r7, [pc, #+136] ; 0x200002D8
300003DC  6038     		str r0, [r7]

#15			CAL		TOF {R:2$2}
(*) UDINT
300003DE  E92D 0021		stmdb sp!, { r0, r5 }
300003E2  F8DF 5078		ldr r5, [pc, #+120] ; 0x200002D0
300003E6  F8DF 4088		ldr r4, [pc, #+136] ; 0x3000012E
300003EA  F044 0401		orr r4, r4, #1
300003EE  47A0     		blx r4
300003F0  E8BD 0021		ldmia sp!, { r0, r5 }

#16			LD		TOF.Q {R:2$2}
(*) UNDEF
300003F4  F8DF 7070		ldr r7, [pc, #+112] ; 0x200002DC
300003F8  7838     		ldrb r0, [r7]

#17			ST		TOF_SET_RESET {R:2$1}
(*) BOOL
300003FA  F8DF 704C		ldr r7, [pc, #+76] ; 0x200002B7
300003FE  7038     		strb r0, [r7]

#18		 
#19			(* Network 3 *)
#20			LD		TON_SET_RESET {R:3$0}
(*) UNDEF
30000400  F8DF 7040		ldr r7, [pc, #+64] ; 0x200002B5
30000404  7838     		ldrb r0, [r7]

#21			ORN		TOF_SET_RESET {R:3$2}
(*) BOOL
30000406  F8DF 7040		ldr r7, [pc, #+64] ; 0x200002B7
3000040A  783F     		ldrb r7, [r7]
3000040C  2F00     		cmp r7, #0
3000040E  BF08 2701		eqmov r7, #1
30000412  BF18 2700		nemov r7, #0
30000416  4338     		orr r0, r0, r7

#22			STN		WDG_FAULT {R:3$1}
(*) BOOL
30000418  F8DF 7024		ldr r7, [pc, #+36] ; 0x200002A7
3000041C  B082     		sub sp, sp, #8
3000041E  F8CD 0000		str r0, [sp]
30000422  2800     		cmp r0, #0
30000424  BF08 2001		eqmov r0, #1
30000428  BF18 2000		nemov r0, #0
3000042C  7038     		strb r0, [r7]
3000042E  F8DD 0000		ldr r0, [sp]
30000432  B002     		add sp, sp, #8

30000434  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000438  F8DD E000		ldr lr, [sp]
3000043C  B002     		add sp, sp, #8

3000043E  4770     		bx lr

30000440  200002A7		; 0x200002A7
30000444  200002B5		; 0x200002B5
30000448  200002B7		; 0x200002B7
3000044C  200002BC		; 0x200002BC
30000450  200002C0		; 0x200002C0
30000454  200002C4		; 0x200002C4
30000458  200002C8		; 0x200002C8
3000045C  200002D0		; 0x200002D0
30000460  200002D4		; 0x200002D4
30000464  200002D8		; 0x200002D8
30000468  200002DC		; 0x200002DC
3000046C  FFFFFFFF		; 0x24021621
30000470  3000012E		; 0x3000012E
30000474  300001B0		; 0x300001B0

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
30000478  4770     		bx lr


*** OUTPUT:
3000047A  4770     		bx lr



**************************************************
	Task Fast init code
**************************************************

3000047C  B082     		sub sp, sp, #8
3000047E  F8CD E000		str lr, [sp]
30000482  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000486  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3000048A  F8DD E000		ldr lr, [sp]
3000048E  B002     		add sp, sp, #8

30000490  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

300004A0  B082     		sub sp, sp, #8
300004A2  F8CD E000		str lr, [sp]
300004A6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 0; *)
#4			MOVE		0,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
300004AA  2000     		mov r0, #0 ; 0
300004AC  F8DF 7058		ldr r7, [pc, #+88] ; 0x200002A8
300004B0  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( TO_DWORD( 0 ), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); *)
#7			LDP0		0	{LNXT:5|3|-1}
(-) UDINT
#8			TO_DWORD	{LNXT:5|3|-1}
(-) USINT
300004B2  2000     		mov r0, #0 ; 0

#9			sysDBase_SetExtTable		0, 0, 0, 0, 0, 0, 0, 0, 0, 0	{LNXT:5|3|-1}
(*) DWORD
300004B4  B088     		sub sp, sp, #32
300004B6  2700     		mov r7, #0 ; 0
300004B8  4639     		mov r1, r7
300004BA  2700     		mov r7, #0 ; 0
300004BC  463A     		mov r2, r7
300004BE  2700     		mov r7, #0 ; 0
300004C0  463B     		mov r3, r7
300004C2  2700     		mov r7, #0 ; 0
300004C4  F8CD 7000		str r7, [sp]
300004C8  2700     		mov r7, #0 ; 0
300004CA  F8CD 7004		str r7, [sp, #+4]
300004CE  2700     		mov r7, #0 ; 0
300004D0  F8CD 7008		str r7, [sp, #+8]
300004D4  2700     		mov r7, #0 ; 0
300004D6  F8CD 700C		str r7, [sp, #+12]
300004DA  2700     		mov r7, #0 ; 0
300004DC  F8CD 7010		str r7, [sp, #+16]
300004E0  2700     		mov r7, #0 ; 0
300004E2  F8CD 7014		str r7, [sp, #+20]
300004E6  2700     		mov r7, #0 ; 0
300004E8  F8CD 7018		str r7, [sp, #+24]
300004EC  F8DF 4010		ldr r4, [pc, #+16] ; 0x807F5B9
300004F0  F044 0401		orr r4, r4, #1
300004F4  47A0     		blx r4
300004F6  B008     		add sp, sp, #32

#10			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
300004F8  F8DF 7008		ldr r7, [pc, #+8] ; 0x200002A5
300004FC  7038     		strb r0, [r7]

300004FE  E005     		b #10

30000500  FFFFFFFF		; 0x0807F5B9
30000504  200002A5		; 0x200002A5
30000508  200002A8		; 0x200002A8

END_PROGRAM
**************************************************
	List program: $$IOConfig
**************************************************

PROGRAM $$IOConfig

        VAR
warningsKiller : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:$$IOConfig}
#1		(*$WAITSWITCH$*)
#2		
#3			(* warningsKiller := sysCfgDOs(0); *)
#4			LDP0		0	{LNXT:4|7|-1}
(-) UDINT
#5			sysCfgDOs	{LNXT:4|7|-1}
(*) USINT
3000050C  2700     		mov r7, #0 ; 0
3000050E  4638     		mov r0, r7
30000510  F8DF 4218		ldr r4, [pc, #+536] ; 0x80867A1
30000514  F044 0401		orr r4, r4, #1
30000518  47A0     		blx r4

#6			ST		warningsKiller	{LNXT:4|7|-1}
(*) BOOL
3000051A  F8DF 722C		ldr r7, [pc, #+556] ; 0x200002A4
3000051E  7038     		strb r0, [r7]

#7		
#8			(* warningsKiller := sysCfgAIs(0); *)
#9			LDP0		0	{LNXT:7|10|-1}
(-) BOOL
#10			sysCfgAIs	{LNXT:7|10|-1}
(*) USINT
30000520  2700     		mov r7, #0 ; 0
30000522  4638     		mov r0, r7
30000524  F8DF 4208		ldr r4, [pc, #+520] ; 0x80867C1
30000528  F044 0401		orr r4, r4, #1
3000052C  47A0     		blx r4

#11			ST		warningsKiller	{LNXT:7|10|-1}
(*) BOOL
3000052E  F8DF 7218		ldr r7, [pc, #+536] ; 0x200002A4
30000532  7038     		strb r0, [r7]

#12		
#13			(* warningsKiller := sysCfgAO(0, 0); *)
#14			LDP0		0	{LNXT:10|11|-1}
(-) BOOL
#15			sysCfgAO		0	{LNXT:10|11|-1}
(*) USINT
30000534  2700     		mov r7, #0 ; 0
30000536  4638     		mov r0, r7
30000538  2700     		mov r7, #0 ; 0
3000053A  4639     		mov r1, r7
3000053C  F8DF 41F4		ldr r4, [pc, #+500] ; 0x80867F1
30000540  F044 0401		orr r4, r4, #1
30000544  47A0     		blx r4

#16			ST		warningsKiller	{LNXT:10|11|-1}
(*) BOOL
30000546  F8DF 7200		ldr r7, [pc, #+512] ; 0x200002A4
3000054A  7038     		strb r0, [r7]

#17		
#18			(* warningsKiller := sysCfgAO(1, 0); *)
#19			LDP0		1	{LNXT:11|12|-1}
(-) BOOL
#20			sysCfgAO		0	{LNXT:11|12|-1}
(*) USINT
3000054C  2701     		mov r7, #1 ; 1
3000054E  4638     		mov r0, r7
30000550  2700     		mov r7, #0 ; 0
30000552  4639     		mov r1, r7
30000554  F8DF 41DC		ldr r4, [pc, #+476] ; 0x80867F1
30000558  F044 0401		orr r4, r4, #1
3000055C  47A0     		blx r4

#21			ST		warningsKiller	{LNXT:11|12|-1}
(*) BOOL
3000055E  F8DF 71E8		ldr r7, [pc, #+488] ; 0x200002A4
30000562  7038     		strb r0, [r7]

#22		
#23			(* warningsKiller := sysCfgAO(2, 0); *)
#24			LDP0		2	{LNXT:12|13|-1}
(-) BOOL
#25			sysCfgAO		0	{LNXT:12|13|-1}
(*) USINT
30000564  2702     		mov r7, #2 ; 2
30000566  4638     		mov r0, r7
30000568  2700     		mov r7, #0 ; 0
3000056A  4639     		mov r1, r7
3000056C  F8DF 41C4		ldr r4, [pc, #+452] ; 0x80867F1
30000570  F044 0401		orr r4, r4, #1
30000574  47A0     		blx r4

#26			ST		warningsKiller	{LNXT:12|13|-1}
(*) BOOL
30000576  F8DF 71D0		ldr r7, [pc, #+464] ; 0x200002A4
3000057A  7038     		strb r0, [r7]

#27		
#28			(* warningsKiller := sysCfgAO(3, 0); *)
#29			LDP0		3	{LNXT:13|16|-1}
(-) BOOL
#30			sysCfgAO		0	{LNXT:13|16|-1}
(*) USINT
3000057C  2703     		mov r7, #3 ; 3
3000057E  4638     		mov r0, r7
30000580  2700     		mov r7, #0 ; 0
30000582  4639     		mov r1, r7
30000584  F8DF 41AC		ldr r4, [pc, #+428] ; 0x80867F1
30000588  F044 0401		orr r4, r4, #1
3000058C  47A0     		blx r4

#31			ST		warningsKiller	{LNXT:13|16|-1}
(*) BOOL
3000058E  F8DF 71B8		ldr r7, [pc, #+440] ; 0x200002A4
30000592  7038     		strb r0, [r7]

#32		
#33			(* warningsKiller := sysCfgProgDIOs(0); *)
#34			LDP0		0	{LNXT:16|19|-1}
(-) BOOL
#35			sysCfgProgDIOs	{LNXT:16|19|-1}
(*) USINT
30000594  2700     		mov r7, #0 ; 0
30000596  4638     		mov r0, r7
30000598  F8DF 419C		ldr r4, [pc, #+412] ; 0x80867F5
3000059C  F044 0401		orr r4, r4, #1
300005A0  47A0     		blx r4

#36			ST		warningsKiller	{LNXT:16|19|-1}
(*) BOOL
300005A2  F8DF 71A4		ldr r7, [pc, #+420] ; 0x200002A4
300005A6  7038     		strb r0, [r7]

#37		
#38			(* warningsKiller := sysCfgProgDIO(0, 0); *)
#39			LDP0		0	{LNXT:19|20|-1}
(-) BOOL
#40			sysCfgProgDIO		0	{LNXT:19|20|-1}
(*) USINT
300005A8  2700     		mov r7, #0 ; 0
300005AA  4638     		mov r0, r7
300005AC  2100     		mov r1, #0 ; 0
300005AE  F8DF 418C		ldr r4, [pc, #+396] ; 0x8086815
300005B2  F044 0401		orr r4, r4, #1
300005B6  47A0     		blx r4

#41			ST		warningsKiller	{LNXT:19|20|-1}
(*) BOOL
300005B8  F8DF 718C		ldr r7, [pc, #+396] ; 0x200002A4
300005BC  7038     		strb r0, [r7]

#42		
#43			(* warningsKiller := sysCfgProgDIO(1, 0); *)
#44			LDP0		1	{LNXT:20|21|-1}
(-) BOOL
#45			sysCfgProgDIO		0	{LNXT:20|21|-1}
(*) USINT
300005BE  2701     		mov r7, #1 ; 1
300005C0  4638     		mov r0, r7
300005C2  2100     		mov r1, #0 ; 0
300005C4  F8DF 4174		ldr r4, [pc, #+372] ; 0x8086815
300005C8  F044 0401		orr r4, r4, #1
300005CC  47A0     		blx r4

#46			ST		warningsKiller	{LNXT:20|21|-1}
(*) BOOL
300005CE  F8DF 7178		ldr r7, [pc, #+376] ; 0x200002A4
300005D2  7038     		strb r0, [r7]

#47		
#48			(* warningsKiller := sysCfgProgDIO(2, 0); *)
#49			LDP0		2	{LNXT:21|22|-1}
(-) BOOL
#50			sysCfgProgDIO		0	{LNXT:21|22|-1}
(*) USINT
300005D4  2702     		mov r7, #2 ; 2
300005D6  4638     		mov r0, r7
300005D8  2100     		mov r1, #0 ; 0
300005DA  F8DF 4160		ldr r4, [pc, #+352] ; 0x8086815
300005DE  F044 0401		orr r4, r4, #1
300005E2  47A0     		blx r4

#51			ST		warningsKiller	{LNXT:21|22|-1}
(*) BOOL
300005E4  F8DF 7160		ldr r7, [pc, #+352] ; 0x200002A4
300005E8  7038     		strb r0, [r7]

#52		
#53			(* warningsKiller := sysCfgProgDIO(3, 0); *)
#54			LDP0		3	{LNXT:22|23|-1}
(-) BOOL
#55			sysCfgProgDIO		0	{LNXT:22|23|-1}
(*) USINT
300005EA  2703     		mov r7, #3 ; 3
300005EC  4638     		mov r0, r7
300005EE  2100     		mov r1, #0 ; 0
300005F0  F8DF 4148		ldr r4, [pc, #+328] ; 0x8086815
300005F4  F044 0401		orr r4, r4, #1
300005F8  47A0     		blx r4

#56			ST		warningsKiller	{LNXT:22|23|-1}
(*) BOOL
300005FA  F8DF 714C		ldr r7, [pc, #+332] ; 0x200002A4
300005FE  7038     		strb r0, [r7]

#57		
#58			(* warningsKiller := sysCfgProgDIO(4, 0); *)
#59			LDP0		4	{LNXT:23|24|-1}
(-) BOOL
#60			sysCfgProgDIO		0	{LNXT:23|24|-1}
(*) USINT
30000600  2704     		mov r7, #4 ; 4
30000602  4638     		mov r0, r7
30000604  2100     		mov r1, #0 ; 0
30000606  F8DF 4134		ldr r4, [pc, #+308] ; 0x8086815
3000060A  F044 0401		orr r4, r4, #1
3000060E  47A0     		blx r4

#61			ST		warningsKiller	{LNXT:23|24|-1}
(*) BOOL
30000610  F8DF 7134		ldr r7, [pc, #+308] ; 0x200002A4
30000614  7038     		strb r0, [r7]

#62		
#63			(* warningsKiller := sysCfgProgDIO(5, 0); *)
#64			LDP0		5	{LNXT:24|25|-1}
(-) BOOL
#65			sysCfgProgDIO		0	{LNXT:24|25|-1}
(*) USINT
30000616  2705     		mov r7, #5 ; 5
30000618  4638     		mov r0, r7
3000061A  2100     		mov r1, #0 ; 0
3000061C  F8DF 411C		ldr r4, [pc, #+284] ; 0x8086815
30000620  F044 0401		orr r4, r4, #1
30000624  47A0     		blx r4

#66			ST		warningsKiller	{LNXT:24|25|-1}
(*) BOOL
30000626  F8DF 7120		ldr r7, [pc, #+288] ; 0x200002A4
3000062A  7038     		strb r0, [r7]

#67		
#68			(* warningsKiller := sysCfgProgDIO(6, 0); *)
#69			LDP0		6	{LNXT:25|26|-1}
(-) BOOL
#70			sysCfgProgDIO		0	{LNXT:25|26|-1}
(*) USINT
3000062C  2706     		mov r7, #6 ; 6
3000062E  4638     		mov r0, r7
30000630  2100     		mov r1, #0 ; 0
30000632  F8DF 4108		ldr r4, [pc, #+264] ; 0x8086815
30000636  F044 0401		orr r4, r4, #1
3000063A  47A0     		blx r4

#71			ST		warningsKiller	{LNXT:25|26|-1}
(*) BOOL
3000063C  F8DF 7108		ldr r7, [pc, #+264] ; 0x200002A4
30000640  7038     		strb r0, [r7]

#72		
#73			(* warningsKiller := sysCfgProgDIO(7, 0); *)
#74			LDP0		7	{LNXT:26|27|-1}
(-) BOOL
#75			sysCfgProgDIO		0	{LNXT:26|27|-1}
(*) USINT
30000642  2707     		mov r7, #7 ; 7
30000644  4638     		mov r0, r7
30000646  2100     		mov r1, #0 ; 0
30000648  F8DF 40F0		ldr r4, [pc, #+240] ; 0x8086815
3000064C  F044 0401		orr r4, r4, #1
30000650  47A0     		blx r4

#76			ST		warningsKiller	{LNXT:26|27|-1}
(*) BOOL
30000652  F8DF 70F4		ldr r7, [pc, #+244] ; 0x200002A4
30000656  7038     		strb r0, [r7]

#77		
#78			(* warningsKiller := sysCfgProgDIO(8, 0); *)
#79			LDP0		8	{LNXT:27|28|-1}
(-) BOOL
#80			sysCfgProgDIO		0	{LNXT:27|28|-1}
(*) USINT
30000658  2708     		mov r7, #8 ; 8
3000065A  4638     		mov r0, r7
3000065C  2100     		mov r1, #0 ; 0
3000065E  F8DF 40DC		ldr r4, [pc, #+220] ; 0x8086815
30000662  F044 0401		orr r4, r4, #1
30000666  47A0     		blx r4

#81			ST		warningsKiller	{LNXT:27|28|-1}
(*) BOOL
30000668  F8DF 70DC		ldr r7, [pc, #+220] ; 0x200002A4
3000066C  7038     		strb r0, [r7]

#82		
#83			(* warningsKiller := sysCfgProgDIO(9, 0); *)
#84			LDP0		9	{LNXT:28|29|-1}
(-) BOOL
#85			sysCfgProgDIO		0	{LNXT:28|29|-1}
(*) USINT
3000066E  2709     		mov r7, #9 ; 9
30000670  4638     		mov r0, r7
30000672  2100     		mov r1, #0 ; 0
30000674  F8DF 40C4		ldr r4, [pc, #+196] ; 0x8086815
30000678  F044 0401		orr r4, r4, #1
3000067C  47A0     		blx r4

#86			ST		warningsKiller	{LNXT:28|29|-1}
(*) BOOL
3000067E  F8DF 70C8		ldr r7, [pc, #+200] ; 0x200002A4
30000682  7038     		strb r0, [r7]

#87		
#88			(* warningsKiller := sysCfgProgDIO(10, 0); *)
#89			LDP0		10	{LNXT:29|30|-1}
(-) BOOL
#90			sysCfgProgDIO		0	{LNXT:29|30|-1}
(*) USINT
30000684  270A     		mov r7, #10 ; 10
30000686  4638     		mov r0, r7
30000688  2100     		mov r1, #0 ; 0
3000068A  F8DF 40B0		ldr r4, [pc, #+176] ; 0x8086815
3000068E  F044 0401		orr r4, r4, #1
30000692  47A0     		blx r4

#91			ST		warningsKiller	{LNXT:29|30|-1}
(*) BOOL
30000694  F8DF 70B0		ldr r7, [pc, #+176] ; 0x200002A4
30000698  7038     		strb r0, [r7]

#92		
#93			(* warningsKiller := sysCfgProgDIO(11, 0); *)
#94			LDP0		11	{LNXT:30|33|-1}
(-) BOOL
#95			sysCfgProgDIO		0	{LNXT:30|33|-1}
(*) USINT
3000069A  270B     		mov r7, #11 ; 11
3000069C  4638     		mov r0, r7
3000069E  2100     		mov r1, #0 ; 0
300006A0  F8DF 4098		ldr r4, [pc, #+152] ; 0x8086815
300006A4  F044 0401		orr r4, r4, #1
300006A8  47A0     		blx r4

#96			ST		warningsKiller	{LNXT:30|33|-1}
(*) BOOL
300006AA  F8DF 709C		ldr r7, [pc, #+156] ; 0x200002A4
300006AE  7038     		strb r0, [r7]

#97		
#98			(* warningsKiller := sysCfgTempProbes(0); *)
#99			LDP0		0	{LNXT:33|36|-1}
(-) BOOL
#100			sysCfgTempProbes	{LNXT:33|36|-1}
(*) USINT
300006B0  2700     		mov r7, #0 ; 0
300006B2  4638     		mov r0, r7
300006B4  F8DF 4088		ldr r4, [pc, #+136] ; 0x8086829
300006B8  F044 0401		orr r4, r4, #1
300006BC  47A0     		blx r4

#101			ST		warningsKiller	{LNXT:33|36|-1}
(*) BOOL
300006BE  F8DF 7088		ldr r7, [pc, #+136] ; 0x200002A4
300006C2  7038     		strb r0, [r7]

#102		
#103			(* warningsKiller := sysCfgTempProbe(0, FALSE, 400.0, 100.0); *)
#104			LDP0		0	{LNXT:36|37|-1}
(-) BOOL
#105			sysCfgTempProbe		FALSE, 400.0, 100.0	{LNXT:36|37|-1}
(*) USINT
300006C4  2700     		mov r7, #0 ; 0
300006C6  4638     		mov r0, r7
300006C8  2100     		mov r1, #0 ; 0
300006CA  F8DF 2084		ldr r2, [pc, #+132] ; 0x43C80000 = 400.000000
300006CE  F8DF 307C		ldr r3, [pc, #+124] ; 0x42C80000 = 100.000000
300006D2  F8DF 4070		ldr r4, [pc, #+112] ; 0x808688D
300006D6  F044 0401		orr r4, r4, #1
300006DA  47A0     		blx r4

#106			ST		warningsKiller	{LNXT:36|37|-1}
(*) BOOL
300006DC  F8DF 7068		ldr r7, [pc, #+104] ; 0x200002A4
300006E0  7038     		strb r0, [r7]

#107		
#108			(* warningsKiller := sysCfgTempProbe(1, FALSE, 400.0, 100.0); *)
#109			LDP0		1	{LNXT:37|38|-1}
(-) BOOL
#110			sysCfgTempProbe		FALSE, 400.0, 100.0	{LNXT:37|38|-1}
(*) USINT
300006E2  2701     		mov r7, #1 ; 1
300006E4  4638     		mov r0, r7
300006E6  2100     		mov r1, #0 ; 0
300006E8  F8DF 2064		ldr r2, [pc, #+100] ; 0x43C80000 = 400.000000
300006EC  F8DF 305C		ldr r3, [pc, #+92] ; 0x42C80000 = 100.000000
300006F0  F8DF 4050		ldr r4, [pc, #+80] ; 0x808688D
300006F4  F044 0401		orr r4, r4, #1
300006F8  47A0     		blx r4

#111			ST		warningsKiller	{LNXT:37|38|-1}
(*) BOOL
300006FA  F8DF 704C		ldr r7, [pc, #+76] ; 0x200002A4
300006FE  7038     		strb r0, [r7]

#112		
#113			(* warningsKiller := sysCfgTempProbe(2, FALSE, 400.0, 100.0); *)
#114			LDP0		2	{LNXT:38|4|-1}
(-) BOOL
#115			sysCfgTempProbe		FALSE, 400.0, 100.0	{LNXT:38|4|-1}
(*) USINT
30000700  2702     		mov r7, #2 ; 2
30000702  4638     		mov r0, r7
30000704  2100     		mov r1, #0 ; 0
30000706  F8DF 2048		ldr r2, [pc, #+72] ; 0x43C80000 = 400.000000
3000070A  F8DF 3040		ldr r3, [pc, #+64] ; 0x42C80000 = 100.000000
3000070E  F8DF 4034		ldr r4, [pc, #+52] ; 0x808688D
30000712  F044 0401		orr r4, r4, #1
30000716  47A0     		blx r4

#116			ST		warningsKiller	{LNXT:38|4|-1}
(*) BOOL
30000718  F8DF 702C		ldr r7, [pc, #+44] ; 0x200002A4
3000071C  7038     		strb r0, [r7]

3000071E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000722  F8DD E000		ldr lr, [sp]
30000726  B002     		add sp, sp, #8

30000728  4770     		bx lr

3000072C  FFFFFFFF		; 0x080867A1
30000730  FFFFFFFF		; 0x080867C1
30000734  FFFFFFFF		; 0x080867F1
30000738  FFFFFFFF		; 0x080867F5
3000073C  FFFFFFFF		; 0x08086815
30000740  FFFFFFFF		; 0x08086829
30000744  FFFFFFFF		; 0x0808688D
30000748  200002A4		; 0x200002A4
3000074C  42C80000		; 0x42C80000
30000750  43C80000		; 0x43C80000

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
30000754  4770     		bx lr


*** OUTPUT:
30000756  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

30000758  B082     		sub sp, sp, #8
3000075A  F8CD E000		str lr, [sp]
3000075E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000762  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000766  F8DD E000		ldr lr, [sp]
3000076A  B002     		add sp, sp, #8

3000076C  4770     		bx lr



**************************************************
	Global init code
**************************************************

30000780  B082     		sub sp, sp, #8
30000782  F8CD E000		str lr, [sp]
30000786  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

Var init: V:MAIN:SW_E_STOP_MOTOR_DRIVER_FAULT = true
3000078A  F8DF 0028		ldr r0, [pc, #+40] ; 0x1
3000078E  F8DF 7030		ldr r7, [pc, #+48] ; 0x24021623
30000792  7038     		strb r0, [r7]

Var init: V:MAIN:WDG_FAULT = true
30000794  F8DF 001C		ldr r0, [pc, #+28] ; 0x1
30000798  F8DF 701C		ldr r7, [pc, #+28] ; 0x200002A7
3000079C  7038     		strb r0, [r7]

Var init: V:MAIN:SW_E_STOP_USER_BUTTON = true
3000079E  F8DF 0014		ldr r0, [pc, #+20] ; 0x1
300007A2  F8DF 7018		ldr r7, [pc, #+24] ; 0x24021622
300007A6  7038     		strb r0, [r7]

300007A8  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300007AC  F8DD E000		ldr lr, [sp]
300007B0  B002     		add sp, sp, #8

300007B2  4770     		bx lr

300007B4  00000001		; 0x00000001
300007B8  200002A7		; 0x200002A7
300007BC  FFFFFFFF		; 0x24021622
300007C0  FFFFFFFF		; 0x24021623



**************************************************
	Global RETAIN init code
**************************************************

300007C4  B082     		sub sp, sp, #8
300007C6  F8CD E000		str lr, [sp]
300007CA  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

300007CE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300007D2  F8DD E000		ldr lr, [sp]
300007D6  B002     		add sp, sp, #8

300007D8  4770     		bx lr



**************************************************
	Task $$VirtualTables init code
**************************************************

300007DA  B082     		sub sp, sp, #8
300007DC  F8CD E000		str lr, [sp]
300007E0  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

300007E4  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300007E8  F8DD E000		ldr lr, [sp]
300007EC  B002     		add sp, sp, #8

300007EE  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		0000000030000000h
End code area:            		00000000300009FCh
Code size:                		000009FCh

Start local data area:    		0000000020000298h
End local data area:      		00000000200002E4h
Local data size:          		0000004Ch

Start retentive data area:		0000000038000800h
End retentive data area:  		0000000038000800h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                AB7551D6
DEBUG MEMO ID:                          300002EE
FULL MEMO ID:                           0000DCDD
********************************************
